data.folder <- "*insert path folder where files are located*"

# Importo delle librerie ####
library(sparklyr)
library(dplyr)
library(caret)
library(e1071)
# library(ggplot2)
# library(dbplot)
# library(scales)


# Set spark connection ####
#Sys.setenv(JAVA_HOME = system("/usr/libexec/java_home -V", intern = T)) # set 'java home' if necessary
spark.configuration <- spark_config()
# spark.configuration$spark.executor.memory <- "512m"
spark.configuration$`sparklyr.shell.driver-memory` <- '4g'  # raddoppio della java heap memory (cache di Spark)
connection <- spark_connect(master = 'local', config = spark.configuration)
options(tibble.width = Inf, tibble.print_max = 20, tibble.print_min = 5)

# 0. Import airline dataset ####
complete.data <- spark_read_csv(
  path = data.folder, sc = connection, name = "airlineDataset", memory = FALSE, overwrite = T) # memory = F -> fast import

# 1. Exploratry analysis and data pre-processing ####
colnames(complete.data) 
n.total.flights <- sdf_nrow(complete.data) # 7.009.726
glimpse(complete.data)

# Unique routes
complete.data %>%
  select(ORIGIN, DEST) %>%
  mutate(route = paste(pmin(ORIGIN, DEST), pmax(ORIGIN, DEST), sep = "-")) %>%
  distinct(route) %>%
  sdf_nrow() # 2.833 routes A/R

# 1.1 NA Analysis ####

# Function to calculate NA percentage by columns
sdf_countNAs <- function(spark.tbl) {
  column.names <- colnames(spark.tbl)
  rows.number <- sdf_nrow(spark.tbl)
  purrr::map(
    column.names,
    function(x) {
      x.sym <- sym(x)
      summarise(spark.tbl, !!x.sym := (sum(as.integer(is.na(!!x.sym)), na.rm = TRUE) / rows.number) * 100) 
    }
  ) %>% 
    sdf_bind_cols()
}

# 1.1.1 Cancelled flights ####
complete.data %>%
  filter(CANCELLED == 1) %>%
  select(DEP_TIME, DEP_DELAY, DEP_DEL15) %>%
  sdf_countNAs()

# 99.1% of flights have never departed, while 0.9% departed. 
complete.data %>%
  filter(CANCELLED == 1) %>%
  sdf_nrow() / n.total.flights
# 1,96% are cancelled flights. 

# 1.1.2 Diverted flights ####
complete.data %>%
  filter(DIVERTED == 1) %>%
  select(ARR_TIME) %>%
  sdf_countNAs()

complete.data %>%
  filter(DIVERTED == 1) %>%
  sdf_nrow() / n.total.flights
# 0,25% of flights are diverted.


# It has been decided not to count the cancelled and diverted flights in the analysis.
# The goal is to analyze delays dividing the flight process into 4 phases:
# departure delay, taxi out, air time and taxi in.

no.issue.data <- complete.data %>%
  filter(CANCELLED == 0 & DIVERTED == 0) %>%
  select(ORIGIN, DEST, DEP_DELAY, DEP_DEL15, TAXI_OUT, TAXI_IN, ARR_DELAY,
         ARR_DEL15, CANCELLED, DIVERTED, CRS_ELAPSED_TIME, AIR_TIME,
         DISTANCE, CARRIER_DELAY, WEATHER_DELAY, NAS_DELAY, SECURITY_DELAY,
         LATE_AIRCRAFT_DELAY) %>%
  compute('airlineDataset')
rm(n.total.flights)

# 1.1.3 NA analysis into 5 features relative to problems in arrival delay ####
no.issue.data %>% 
  select(CARRIER_DELAY, WEATHER_DELAY, NAS_DELAY, SECURITY_DELAY, LATE_AIRCRAFT_DELAY)  %>%
  sdf_countNAs()

no.issue.data %>%
  filter(ARR_DEL15 == 0) %>%
  sdf_nrow() / sdf_nrow(no.issue.data)

# 1.2 Irregular values ####

sdf_describe(no.issue.data, cols = 'AIR_TIME')
sdf_describe(no.issue.data, cols = 'DISTANCE')

no.issue.data %>% 
  sdf_quantile('DISTANCE', probabilities = seq(0,0.001,0.0001))

# 1.2.1 Speed ####
# It has been decided to calculate speed as a fraction of DISTANCE and AIR_TIME and to delete flights
# with speed more than 950 km/h

preprocessed.data <- no.issue.data %>%
  mutate(speed = (DISTANCE*1.60934)/(AIR_TIME/60)) %>%
  filter(speed<950) %>%
  na.replace(LATE_AIRCRAFT_DELAY=0, SECURITY_DELAY=0, NAS_DELAY=0, WEATHER_DELAY=0, CARRIER_DELAY=0) %>%
  select(-speed)

# 2. Feature Engineering ####

# 2.1 Taxi Out ####
preprocessed.data <- preprocessed.data %>%
  group_by(ORIGIN) %>% 
  mutate(percentile = ifelse(DEP_DEL15 == 0 & ARR_DEL15 == 0,
                             percent_rank(TAXI_OUT), NA),
         taxi_out_NA = ifelse(percentile > 0.9 | percentile < 0.1, NA, TAXI_OUT),
         mean_taxi_out = mean(taxi_out_NA, na.rm = T),
         diff_taxi_out = TAXI_OUT - mean_taxi_out) %>%
  select(-c(percentile, taxi_out_NA, mean_taxi_out))


# 2.2 Taxi In ####
preprocessed.data <- preprocessed.data %>%
  group_by(DEST) %>% 
  mutate(percentile = ifelse(DEP_DEL15 == 0 & ARR_DEL15 == 0, 
                             percent_rank(TAXI_IN), NA),
         taxi_in_NA = ifelse(percentile > 0.9 | percentile < 0.1, NA, TAXI_IN),
         mean_taxi_in = mean(taxi_in_NA, na.rm = T),
         diff_taxi_in = TAXI_IN - mean_taxi_in) %>% 
  select(-c(percentile, mean_taxi_in, taxi_in_NA))

rm(no.issue.data)
db_drop_table(connection, 'airlinedataset')

# 2.3 Air Time ####
no.issue.flights <- preprocessed.data %>%
  group_by(ORIGIN, DEST) %>% 
  mutate(percentile = ifelse(DEP_DEL15 == 0 & ARR_DEL15 == 0, 
                             percent_rank(AIR_TIME), NA),
         air_time_NA = ifelse(percentile > 0.9 | percentile < 0.1, NA, AIR_TIME), 
         mean_air_time = mean(air_time_NA, na.rm = T),
         diff_air_time = AIR_TIME - mean_air_time, 
         frequenza = ifelse(DEP_DEL15 == 0 & ARR_DEL15 == 0, 1, 0),
         sum_frequenza = sum(frequenza, na.rm = T)) %>%
  filter(sum_frequenza > 5) %>%
  select(ARR_DEL15, DEP_DEL15, diff_taxi_out, diff_taxi_in, diff_air_time,
         DEP_DELAY, ARR_DELAY, WEATHER_DELAY, NAS_DELAY, CARRIER_DELAY,
         SECURITY_DELAY, LATE_AIRCRAFT_DELAY) %>%
  ungroup() %>%
  compute('onlygoodflights')

rm(preprocessed.data)

sdf_nrow(no.issue.flights) # 6.851.582
object.size(no.issue.flights)


# 3. Exploratory Data Analysis new features ####

# 3.1 Flights with late departure and arrival ####

# 3.1.1 diff_taxi_out
no.issue.flights %>%
  filter(DEP_DEL15 == 1 & ARR_DEL15 == 1) %>%
  sdf_quantile(column = 'diff_taxi_out', probabilities=seq(0,1,0.1))

#     0%    10%    20%    30%    40%    50%    60%    70%    80%    90%   100% 
# -30.00  -5.70  -3.83  -2.48  -1.18   0.27   2.15   4.73   9.02  18.01 392.00

no.issue.flights %>%
  filter(DEP_DEL15 == 1 & ARR_DEL15 == 1) %>%
  summarize(mean_diff_taxi_out = mean(diff_taxi_out)) # 4.44

# 3.1.2 diff_air_time
no.issue.flights %>%
  filter(DEP_DEL15 == 1 & ARR_DEL15 == 1) %>%
  sdf_quantile(column = 'diff_air_time', probabilities=seq(0,1,0.1))

#     0%    10%    20%    30%    40%    50%    60%    70%    80%     90%     100% 
# -59.94  -8.33  -5.02  -3.03  -1.45   0.05   1.72   3.85   6.95   12.70   756.77 

no.issue.flights %>%
  filter(DEP_DEL15 == 1 & ARR_DEL15 == 1) %>%
  summarize(mean_diff_air_time = mean(diff_air_time)) # 1.45

# 3.1.3 diff_taxi_in
no.issue.flights %>%
  filter(DEP_DEL15 == 1 & ARR_DEL15 == 1) %>%
  sdf_quantile(column = 'diff_taxi_in', probabilities=seq(0,1,0.1))

#     0%    10%    20%    30%    40%    50%    60%    70%    80%    90%   100% 
# -10.18  -2.95  -2.08  -1.57  -0.91  -0.54   0.12   0.83   1.87   4.25 231.30

no.issue.flights %>%
  filter(DEP_DEL15 == 1 & ARR_DEL15 == 1) %>%
  summarize(mean_diff_taxi_in = mean(diff_taxi_in)) # 0.54

# 3.2 Flights with late departures but recovered delay arrival ####
# 3.2.1 diff_taxi_out 
no.issue.flights %>%
  filter(DEP_DEL15 == 1 & ARR_DEL15 == 0) %>%
  sdf_quantile(column = 'diff_taxi_out', probabilities=seq(0,1,0.1))

#     0%    10%    20%    30%    40%    50%    60%    70%    80%    90%   100% 
# -25.00  -7.48  -5.72  -4.52  -3.62  -2.70  -1.73  -0.65   1.02   3.53  56.00 

no.issue.flights %>%
  filter(DEP_DEL15 == 1 & ARR_DEL15 == 0) %>%
  summarize(mean(diff_taxi_out)) # -2.18

# 3.2.2 diff_air_time
no.issue.flights %>%
  filter(DEP_DEL15 == 1 & ARR_DEL15 == 0) %>%
  sdf_quantile(column = 'diff_air_time', probabilities=seq(0,1,0.1))

#     0%    10%    20%    30%    40%    50%    60%    70%    80%    90%   100% 
# -57.28 -13.61  -9.56  -7.05  -5.22  -3.72  -2.37  -0.99   0.68   3.31  52.36

no.issue.flights %>%
  filter(DEP_DEL15 == 1 & ARR_DEL15 == 0) %>%
  summarize(mean(diff_air_time)) # -4.47

# 3.2.3 diff_taxi_in
no.issue.flights %>%
  filter(DEP_DEL15 == 1 & ARR_DEL15 == 0) %>%
  sdf_quantile(column = 'diff_taxi_in', probabilities=seq(0,1,0.1))

#     0%    10%    20%    30%    40%    50%    60%    70%    80%    90%    100% 
# -10.18  -3.62  -2.66  -1.92  -1.57  -1.00  -0.67  -0.05   0.66   1.92   41.98 

no.issue.flights %>%
  filter(DEP_DEL15 == 1 & ARR_DEL15 == 0) %>%
  summarize(mean(diff_taxi_in)) # 0.54


# 3.3 Flights with no late departure that generate arrival delays ####
# 3.3.1 diff_taxi_out
no.issue.flights %>%
  filter(DEP_DEL15 == 0 & ARR_DEL15 == 1) %>%
  sdf_quantile(column = 'diff_taxi_out', probabilities=seq(0,1,0.1))

#     0%    10%    20%    30%    40%    50%    60%    70%    80%    90%   100% 
# -29.00  -2.33   0.33   3.13   6.21   9.82  14.23  19.48  26.46  38.37 412.33

no.issue.flights %>%
  filter(DEP_DEL15 == 0 & ARR_DEL15 == 1) %>%
  summarize(mean(diff_taxi_out)) # 15.4

# 3.3.2 diff_air_time
no.issue.flights %>%
  filter(DEP_DEL15 == 0 & ARR_DEL15 == 1) %>%
  sdf_quantile(column = 'diff_air_time', probabilities=seq(0,1,0.1))

#     0%     10%     20%     30%     40%     50%     60%     70%     80%     90%    100% 
# -55.23   -3.48   -0.40    2.06    4.61    7.48   10.87   15.01   20.36   28.46 1015.77

no.issue.flights %>%
  filter(DEP_DEL15 == 0 & ARR_DEL15 == 1) %>%
  summarize(mean(diff_air_time)) # 10.4

# 3.3.3 diff_taxi_in
no.issue.flights %>%
  filter(DEP_DEL15 == 0 & ARR_DEL15 == 1) %>%
  sdf_quantile(column = 'diff_taxi_in', probabilities=seq(0,1,0.1))

#     0%    10%    20%    30%    40%    50%    60%    70%    80%    90%   100% 
# -10.18  -2.66  -1.67  -0.87  -0.18   0.37   1.29   2.43   4.74  10.92 300.13

no.issue.flights %>%
  filter(DEP_DEL15 == 0 & ARR_DEL15 == 1) %>%
  summarize(mean(diff_taxi_in)) # 3.03

#     0%    10%    20%    30%    40%    50%    60%    70%    80% 
# -10.18  -2.66  -1.67  -0.87  -0.18   0.37   1.29   2.43   4.76 
#     90%   100% 
#   10.92 300.13

# 4. Model Construction ####

# 4.1 Correlation matrix ####
ml_corr(no.issue.flights, method = 'pearson',
        columns = c("diff_taxi_out", "diff_taxi_in", "diff_air_time", "DEP_DELAY",
                    "ARR_DELAY", "WEATHER_DELAY", "NAS_DELAY",
                    "CARRIER_DELAY", "SECURITY_DELAY", "LATE_AIRCRAFT_DELAY"))

# 4.2 Flights recovering late departure ####

del1.arr0 <- no.issue.flights %>% 
  filter(DEP_DEL15==1 & ARR_DEL15==0)

del1.arr0 %>%
  ml_corr(method = 'pearson',
          columns = c("diff_taxi_out", "diff_taxi_in", "diff_air_time", "DEP_DELAY",
                      "ARR_DELAY"))
partitions <- del1.arr0 %>% 
  sdf_random_split(training = 0.7, test = 0.3, seed = 1111)

training.set <- partitions$training
test.set <- partitions$test

# 4.2.1 decision tree ####
ml_dt <- training.set %>%
  ml_decision_tree(ARR_DELAY ~ DEP_DELAY + diff_taxi_out + diff_taxi_in + diff_air_time, type = 'regression')

pred <- ml_predict(ml_dt, test.set)
ml_regression_evaluator(pred, 'ARR_DELAY') # 5.746348
ml_regression_evaluator(pred, label_col = 'ARR_DELAY', metric_name = 'r2') # 0.2444775

ml_tree_feature_importance(ml_dt)
#     feature      importance
# 1 diff_air_time  0.5308759
# 2     DEP_DELAY  0.2420415
# 3 diff_taxi_out  0.2270826
# 4  diff_taxi_in  0.0000000

# 4.3 Flights with late departure and late arrival ####
del1.arr1 <- no.issue.flights %>% 
  filter(DEP_DEL15==1 & ARR_DEL15==1) 

del1.arr1 %>%
  ml_corr(method = 'pearson',
          columns = c("diff_taxi_out", "diff_taxi_in", "diff_air_time", "DEP_DELAY",
                      "ARR_DELAY", "WEATHER_DELAY", "NAS_DELAY",
                      "CARRIER_DELAY", "SECURITY_DELAY", "LATE_AIRCRAFT_DELAY"))

partitions <- del1.arr1 %>% 
  sdf_random_split(training = 0.7, test = 0.3, seed = 1111)

training.set <- partitions$training
test.set <- partitions$test

lm_model <- training.set %>%
  ml_linear_regression(ARR_DELAY ~ DEP_DELAY + diff_taxi_out +
                         diff_taxi_in + diff_air_time, standardization=FALSE)
summary(lm_model)

# Coefficients:
#   (Intercept)     DEP_DELAY diff_taxi_out  diff_taxi_in diff_air_time 
# -2.8478472     0.9873756     0.9133920     0.8635781     0.8204724 
# 
# R-Squared: 0.9876
# Root Mean Squared Error: 6.999

pred <- ml_predict(lm_model, test.set)
ml_regression_evaluator(pred, label_col = 'ARR_DELAY', metric_name = 'r2') # 0.9873121
ml_regression_evaluator(pred, label_col = 'ARR_DELAY', metric_name = 'rmse') # 7.022126

# residuals
augment(lm_model, test.set) %>% 
  select(fitted, resid) %>%
  dbplot::dbplot_raster(fitted, resid)

# 4.4 Flights that generate delays after departures ####

del0.arr1 <- no.issue.flights %>% 
  filter(DEP_DEL15==0 & ARR_DEL15==1) 

del0.arr1 %>%
  ml_corr(method = 'pearson',
          columns = c("diff_taxi_out", "diff_taxi_in", "diff_air_time", "DEP_DELAY",
                      "ARR_DELAY", "WEATHER_DELAY", "NAS_DELAY",
                      "CARRIER_DELAY", "SECURITY_DELAY", "LATE_AIRCRAFT_DELAY"))

partitions <- del0.arr1 %>% 
  sdf_random_split(training = 0.7, test = 0.3, seed = 1111)

training.set <- partitions$training
test.set <- partitions$test

# 4.4.1 Linear Regression ####
lm_model <- training.set %>%
              ml_linear_regression(ARR_DELAY ~ DEP_DELAY + diff_taxi_out + diff_taxi_in + diff_air_time, 
                                   standardization=FALSE)

summary(lm_model)
# Coefficients:
#   (Intercept)     DEP_DELAY diff_taxi_out  diff_taxi_in diff_air_time 
# 2.4402837     0.8238197     0.8447044     0.7816323     0.7554890 
# 
# R-Squared: 0.8543
# Root Mean Squared Error: 6.689

pred <- ml_predict(lm_model, test.set)
ml_regression_evaluator(pred, label_col = 'ARR_DELAY', metric_name = 'r2') # 0.858974
ml_regression_evaluator(pred, label_col = 'ARR_DELAY', metric_name = 'rmse') # 6.635035

# residuals
augment(lm_model, test.set) %>% 
  select(fitted, resid) %>%
  dbplot::dbplot_raster(fitted, resid)

# 4.5 Classification problem ####
only.late.departures <- no.issue.flights %>%
  filter(DEP_DEL15 == 1)

# Class unbalanced
only.late.departures %>%
  count(ARR_DEL15)
# 0    206.986
# 1   1.112.588

n_0 <- only.late.departures %>%
  filter(ARR_DEL15 == 0) %>%
  sdf_nrow()
n_1 <- only.late.departures %>%
  filter(ARR_DEL15 == 1) %>%
  sdf_nrow()
n_0 / (n_0 + n_1) # 0.1568

partitions <- only.late.departures %>% 
  sdf_random_split(training = 0.7, test = 0.3, seed = 1111)

training.set <- partitions$training

n_0 <- training.set %>%
  filter(ARR_DEL15 == 0) %>%
  sdf_nrow()
n_1 <- training.set %>%
  filter(ARR_DEL15 == 1) %>%
  sdf_nrow()

p.down.sample <- (n_0 * (1 - 0.4)) / (0.4 * n_1)
down.sample.1 <- training.set %>%
  filter(ARR_DEL15 == 1) %>%
  sdf_sample(fraction = (p.down.sample), seed = 1111) 

training.set <- training.set %>%
  filter(ARR_DEL15 == 0) %>%
  sdf_bind_rows(down.sample.1)

log_model <- training.set %>%
              ml_logistic_regression(ARR_DEL15 ~ DEP_DELAY + diff_taxi_out + diff_taxi_in + diff_air_time)

summary(log_model)
# Coefficients:
# (Intercept)     DEP_DELAY diff_taxi_out  diff_taxi_in diff_air_time 
# -5.6621040     0.2430228     0.1924648     0.1748417     0.2006278 

test.set.before.log.test <- partitions$test
pred <- ml_predict(log_model, test.set.before.log.test)
ml_binary_classification_evaluator(pred, label_col = "ARR_DEL15", metric_name = "areaUnderROC") # 0.964914 

logistic.test.prediction <- pred %>% 
  select(ARR_DEL15, prediction) %>%
  collect()

confusionMatrix(data = as.factor(logistic.test.prediction$prediction),
                reference = as.factor(logistic.test.prediction$ARR_DEL15))

#           Reference
# Prediction      0      1
#           0  45955  12324
#           1  16060 321173
#          Accuracy : 0.894 
#      Sensitivity : 0.9001        
#      Specificity : 0.8929
# Osservando le ultime due metriche sopra, il classificatore risulta 
# piuttosto bilanciato.


# 5. Testing phase ####

# 5.1 Voli partiti in ritardo e arrivati in ritardo ####

partitions <- del1.arr1 %>% 
  sdf_random_split(training = 0.7, test = 0.3, seed = 1111)

training.set <- partitions$training
test.set.before.testing <- partitions$test

# 20% reduction airtime
test.set.for.testing_AT20 <- partitions$test %>%
  mutate(test_diff_air_time = ifelse(diff_air_time > 0, diff_air_time*(1 - 0.2), diff_air_time*(1 + 0.2))) %>%
  select(-diff_air_time) %>%
  rename(diff_air_time = test_diff_air_time)

# -50% airtime
test.set.for.testing_AT50 <- partitions$test %>%
  mutate(test_diff_air_time = ifelse(diff_air_time > 0, diff_air_time*(1- 0.5), diff_air_time*(1 + 0.5))) %>%
  select(-diff_air_time) %>%
  rename(diff_air_time = test_diff_air_time)

# test taxi out -20%
test.set.for.testing_TO20 <- partitions$test %>%
  mutate(test_diff_taxi_out = ifelse(diff_taxi_out > 0, diff_taxi_out*(1- 0.2), diff_taxi_out*(1 + 0.2))) %>%
  select(-diff_taxi_out) %>%
  rename(diff_taxi_out = test_diff_taxi_out)

# test diff_taxi_out and diff_air_time -20% 
test.set.for.testing_ATTO20 <- partitions$test %>%
  mutate(test_diff_taxi_out = ifelse(diff_taxi_out > 0, diff_taxi_out*(1- 0.2), diff_taxi_out*(1 + 0.2)),
         test_diff_air_time = ifelse(diff_air_time > 0, diff_air_time*(1 - 0.2), diff_air_time*(1 + 0.2))) %>%
  select(-diff_taxi_out, -diff_air_time) %>%
  rename(diff_taxi_out = test_diff_taxi_out,
         diff_air_time = test_diff_air_time)

# linear regressione model with late flights in departure and arrival
lm_model <- training.set %>%
              ml_linear_regression(ARR_DELAY ~ DEP_DELAY + diff_taxi_out + diff_taxi_in + diff_air_time, 
                                   standardization=FALSE)

pred.before.testing <- ml_predict(lm_model, test.set.before.testing)
pred.after.testingAT20 <- ml_predict(lm_model, test.set.for.testing_AT20)
pred.after.testingAT50 <- ml_predict(lm_model, test.set.for.testing_AT50)
pred.after.testingTO20 <- ml_predict(lm_model, test.set.for.testing_TO20)
pred.after.testingATTO20 <-ml_predict(lm_model, test.set.for.testing_ATTO20)

pred.before.testing %>%
  summarize(before_test = mean(prediction)) 

pred.after.testingAT20 %>%
  summarise(after_test = mean(prediction)) # 66.5
1 - 66.5/67.6 

pred.after.testingAT50 %>%
  summarise(after_test = mean(prediction)) # 64.9
1 - 64.9/67.6 

pred.after.testingTO20 %>%
  summarise(after_test = mean(prediction)) # 66.2
1 - 66.2/67.6 

pred.after.testingATTO20 %>%
  summarise(after_test = mean(prediction)) # 65.1
1 - 65.1/67.6 # 0.03698225

# 5.2 Flights that generate delay after departure ####

partitions <- del0.arr1 %>% 
  sdf_random_split(training = 0.7, test = 0.3, seed = 1111)

training.set <- partitions$training
test.set.before.testing <- partitions$test

# -20% airtime
test.set.for.testing_AT20 <- partitions$test %>%
  mutate(test_diff_air_time = ifelse(diff_air_time > 0, diff_air_time*(1 - 0.2), diff_air_time*(1 + 0.2))) %>%
  select(-diff_air_time) %>%
  rename(diff_air_time = test_diff_air_time)

# -50% airtime
test.set.for.testing_AT50 <- partitions$test %>%
  mutate(test_diff_air_time = ifelse(diff_air_time > 0, diff_air_time*(1- 0.5), diff_air_time*(1 + 0.5))) %>%
  select(-diff_air_time) %>%
  rename(diff_air_time = test_diff_air_time)

# -20% taxi out
test.set.for.testing_TO20 <- partitions$test %>%
  mutate(test_diff_taxi_out = ifelse(diff_taxi_out > 0, diff_taxi_out*(1- 0.2), diff_taxi_out*(1 + 0.2))) %>%
  select(-diff_taxi_out) %>%
  rename(diff_taxi_out = test_diff_taxi_out)

# -20% taxi out and airtime
test.set.for.testing_ATTO20 <- partitions$test %>%
  mutate(test_diff_taxi_out = ifelse(diff_taxi_out > 0, diff_taxi_out*(1- 0.2), diff_taxi_out*(1 + 0.2)),
         test_diff_air_time = ifelse(diff_air_time > 0, diff_air_time*(1 - 0.2), diff_air_time*(1 + 0.2))) %>%
  select(-diff_taxi_out, -diff_air_time) %>%
  rename(diff_taxi_out = test_diff_taxi_out,
         diff_air_time = test_diff_air_time)

lm_model <- training.set %>%
  ml_linear_regression(ARR_DELAY ~ DEP_DELAY + diff_taxi_out + diff_taxi_in +
                         diff_air_time, standardization=FALSE)

pred.before.testing <- ml_predict(lm_model, test.set.before.testing)
pred.after.testingAT20 <- ml_predict(lm_model, test.set.for.testing_AT20)
pred.after.testingAT50 <- ml_predict(lm_model, test.set.for.testing_AT50)
pred.after.testingTO20 <- ml_predict(lm_model, test.set.for.testing_TO20)
pred.after.testingATTO20 <-ml_predict(lm_model, test.set.for.testing_ATTO20)

pred.before.testing %>%
  summarize(before_test = mean(prediction))
# 27.5

pred.after.testingAT20%>%
  summarise(after_test = mean(prediction))
1 - 25.6/27.5 # 0.0691

pred.after.testingAT50%>%
  summarise(after_test = mean(prediction))
1 - 22.9/27.5 # 0.1673

pred.after.testingTO20%>%
  summarise(after_test = mean(prediction)) 
1 - 24.7/27.5 # 0.1018

pred.after.testingATTO20 %>%
  summarise(after_test = mean(prediction))
1 - 22.8/27.5 # 0.1709

# 5.3 Classification problem ####

# -20% airtime
test.set.for.testing_AT20 <- test.set.before.log.test %>%
  mutate(test_diff_air_time = ifelse(diff_air_time > 0, diff_air_time*(1 - 0.2), diff_air_time*(1 + 0.2))) %>%
  select(-diff_air_time) %>%
  rename(diff_air_time = test_diff_air_time)

# -50% airtime
test.set.for.testing_AT50 <- test.set.before.log.test %>%
  mutate(test_diff_air_time = ifelse(diff_air_time > 0, diff_air_time*(1- 0.5), diff_air_time*(1 + 0.5))) %>%
  select(-diff_air_time) %>%
  rename(diff_air_time = test_diff_air_time)

# -20% taxi out
test.set.for.testing_TO20 <- test.set.before.log.test %>%
  mutate(test_diff_taxi_out = ifelse(diff_taxi_out > 0, diff_taxi_out*(1- 0.2), diff_taxi_out*(1 + 0.2))) %>%
  select(-diff_taxi_out) %>%
  rename(diff_taxi_out = test_diff_taxi_out)

# -20% taxi out and airtime
test.set.for.testing_ATTO20 <- test.set.before.log.test %>%
  mutate(test_diff_taxi_out = ifelse(diff_taxi_out > 0, diff_taxi_out*(1- 0.2), diff_taxi_out*(1 + 0.2)),
         test_diff_air_time = ifelse(diff_air_time > 0, diff_air_time*(1 - 0.2), diff_air_time*(1 + 0.2))) %>%
  select(-diff_taxi_out, -diff_air_time) %>%
  rename(diff_taxi_out = test_diff_taxi_out,
         diff_air_time = test_diff_air_time)

pred.before.testing <- ml_predict(log_model, test.set.before.log.test)
pred.after.testingAT20 <- ml_predict(log_model, test.set.for.testing_AT20)
pred.after.testingAT50 <- ml_predict(log_model, test.set.for.testing_AT50)
pred.after.testingTO20 <- ml_predict(log_model, test.set.for.testing_TO20)
pred.after.testingATTO20 <-ml_predict(log_model, test.set.for.testing_ATTO20)

log.test.prediction <- pred.before.testing %>% 
  select(ARR_DEL15, prediction) %>%
  collect()

confusionMatrix(data = as.factor(log.test.prediction$prediction),
                reference = as.factor(log.test.prediction$ARR_DEL15))

# -20% airtime
log.test.prediction <- pred.after.testingAT20 %>% 
  select(ARR_DEL15, prediction) %>%
  collect()

confusionMatrix(data = as.factor(log.test.prediction$prediction),
                reference = as.factor(log.test.prediction$ARR_DEL15))
56824/55817 - 1

# -50% airtime
log.test.prediction <- pred.after.testingAT50 %>% 
  select(ARR_DEL15, prediction) %>%
  collect()

confusionMatrix(data = as.factor(log.test.prediction$prediction),
                reference = as.factor(log.test.prediction$ARR_DEL15))
58066/55817 - 1

# -20% taxiout
log.test.prediction <- pred.after.testingTO20 %>% 
  select(ARR_DEL15, prediction) %>%
  collect()

confusionMatrix(data = as.factor(log.test.prediction$prediction),
                reference = as.factor(log.test.prediction$ARR_DEL15))
56573/55817 - 1
# Si è ottenuto un aumento del veri positivi del 1,4%

# -20% taxi out and airtime
log.test.prediction <- pred.after.testingATTO20 %>% 
  select(ARR_DEL15, prediction) %>%
  collect()

confusionMatrix(data = as.factor(log.test.prediction$prediction),
                reference = as.factor(log.test.prediction$ARR_DEL15))
57475/55817 - 1
